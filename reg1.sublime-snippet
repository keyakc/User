<snippet>
	<content><![CDATA[
		// JS
//捕获
var url = 'http://blog.163.com/album?id=1#comment';
var reg = /(https?:)\/\/([^\/]+)(\/[^\?]*)?(\?[^#]*)?(#.*)?/;
var arr = url.match(reg);
console.log(arr);

//固定替换
var str = 'The price of tomato is 5, the price of apple is 10';
str0 = str.replace(/(\d+)/g,'\$1.00');//样式替换
console.log(str0);
//函数替换
var html = '<label>网址：</label><input placeholder="以http://起始">';
html=html.replace(/[<>]/g,function(m0){
	switch(m0){
		case'<':return '&lt;';
		case'>':return '&gt;';
	}
	});
	console.log(html);

var reg=/(.)(\d+)/g;
var scores='Tom $88, Nicholas ￥100, jack ￡38.';
var result;
while(result=reg.exec(scores)){
	console.log(result);
	console.log(reg.lastIndex);//下一次匹配起始位置
	reg.lastIndex +=10;
}

// JAVA
//Pattern.matches返回boolean
String pattern = ".*runoob.*";
boolean isMatch = Pattern.matches(pattern, content);

// 捕获
// 按指定模式在字符串查找
String line = "This order was placed for QT3000! OK?";
String pattern = "(\\D*)(\\d+)(.*)";

// 创建 Pattern 对象
Pattern r = Pattern.compile(pattern);

// 现在创建 matcher 对象
Matcher m = r.matcher(line);
if (m.find() {
 System.out.println("Found value: " + m.group(0) );// 正则（匹配）对象
 System.out.println("Found value: " + m.group(1) );// This order was placed for QT
 System.out.println("Found value: " + m.group(2) );// 3000
 System.out.println("Found value: " + m.group(3) );// ! OK?
} else {
 System.out.println("NO MATCH");
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>reg1</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>text.html</scope>
</snippet>
